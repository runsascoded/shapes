

use log::{info, debug, warn};
use serde::{Deserialize, Serialize};
use tsify::Tsify;

use crate::{diagram::{Diagram, Targets}, shape::Input};

#[derive(Debug, Clone, Tsify, Serialize, Deserialize)]
pub struct Model {
    pub steps: Vec<Diagram>,
    pub repeat_idx: Option<usize>,
    pub min_idx: usize,
    pub min_error: f64,
}

impl Model {
    pub fn new(inputs: Vec<Input>, targets: Targets) -> Model {
        let diagram = Diagram::new(inputs, targets, None);
        let min_error = (&diagram).error.re.clone();
        let mut steps = Vec::<Diagram>::new();
        steps.push(diagram);
        let repeat_idx: Option<usize> = None;
        Model { steps, min_idx: 0, repeat_idx, min_error }
    }
    pub fn train(&mut self, max_step_error_ratio: f64, max_steps: usize) {
        let num_steps = self.steps.len().clone();
        let mut diagram = self.steps[num_steps - 1].clone();
        for idx in 0..max_steps {
            let step_idx = idx + num_steps;
            debug!("Step {}:", step_idx);
            let nxt = diagram.step(max_step_error_ratio);
            let nxt_err = nxt.error.re;
            if nxt_err.is_nan() {
                warn!("NaN err at step {}: {:?}", step_idx, nxt);
                self.repeat_idx = Some(step_idx);
                break;
            }
            let min_step = &self.steps[self.min_idx];
            if nxt_err < min_step.error.re {
                self.min_idx = step_idx;
                self.min_error = nxt_err;
            }
            self.steps.push(nxt.clone());

            // Check whether the newest step (`nxt`) is a repeat of a previous step:
            for (prv_idx, prv) in self.steps.iter().enumerate().rev().skip(1) {
                let prv_err = prv.error.re;
                if prv_err == nxt_err &&
                    prv
                    .shapes()
                    .iter()
                    .zip(nxt.shapes().iter())
                    .all(|(a, b)| {
                        //println!("Checking {} vs {}", a, b);
                        a == b
                    })
                {
                    info!("  Step {} matches step {}: {}", step_idx, prv_idx, prv_err);
                    self.repeat_idx = Some(prv_idx);
                    break;
                }
            }
            // If so, break
            if self.repeat_idx.is_some() {
                break;
            }
            diagram = nxt;
        }
    }
    pub fn grad_size(&self) -> usize {
        self.steps[0].grad_size()
    }
}

#[cfg(test)]
mod tests {
    use std::{env, collections::HashMap};

    use crate::{dual::{Dual, is_one_hot, d_fns}, circle::Circle, fmt::Fmt, r2::R2, shape::Shape, to::To, ellipses::xyrr::XYRR};

    use super::*;
    use test_log::test;

    static FIZZ_BUZZ: [(&str, f64); 3] = [
        ("0*", 1. /  3.),  // Fizz (multiples of 3)
        ("*1", 1. /  5.),  // Buzz (multiples of 5)
        ("01", 1. / 15.),  // Fizz Buzz (multiples of both 3 and 5)
    ];

    static FIZZ_BUZZ_BAZZ: [(&str, f64); 7] = [
        ( "0**", 35. ),  // 1 / 3
        ( "*1*", 21. ),  // 1 / 5
        ( "**2", 15. ),  // 1 / 7
        ( "01*",  7. ),  // 1 / 15
        ( "0*2",  5. ),  // 1 / 21
        ( "*12",  3. ),  // 1 / 35
        ( "012",  1. ),  // 1 / 105
    ];

    static VARIANT_CALLERS: [ (&str, f64); 15 ] = [
        ( "0---", 633. ),
        ( "-1--", 618. ),
        ( "--2-", 187. ),
        ( "---3", 319. ),
        ( "01--", 112. ),
        ( "0-2-",   0. ),
        ( "0--3",  13. ),
        ( "-12-",  14. ),
        ( "-1-3",  55. ),
        ( "--23",  21. ),
        ( "012-",   1. ),
        ( "01-3",  17. ),
        ( "0-23",   0. ),
        ( "-123",   9. ),
        ( "0123",  36. ),
    ];

    #[derive(Clone)]
    pub struct ExpectedStep {
        vals: Vec<f64>,
        err: f64,
        grads: Vec<f64>,
    }
    impl ExpectedStep {
        pub fn dual(&self) -> Dual {
            Dual::new(self.err, self.grads.clone())
        }
    }
    impl<const N: usize> From<([f64; N], f64, [f64; N])> for ExpectedStep {
        fn from((vals, err, grads): ([f64; N], f64, [f64; N])) -> Self {
            ExpectedStep { vals: vals.to_vec(), err, grads: grads.to_vec() }
        }
    }

    fn get_actual(step: &Diagram, getters: &Vec<CoordGetter>) -> ExpectedStep {
        let error = step.error.clone();
        let err = error.v();
        let mut vals: Vec<f64> = Vec::new();
        let mut grads: Vec<f64> = Vec::new();
        getters.iter().enumerate().for_each(|(coord_idx, getter)| {
            let val: f64 = getter.0(step.clone());
            vals.push(val);
            let error_d = error.d();
            let err_grad = error_d[coord_idx];
            grads.push(-err_grad);
        });
        ExpectedStep { vals, err, grads }
    }

    fn print_step(diagram: &Diagram, idx: usize, getters: &Vec<CoordGetter>) {
        let actual = get_actual(diagram, getters);
        let vals_str = actual.vals.iter().map(|g| g.s(3)).collect::<Vec<_>>().join(",");
        let grads_str = actual.grads.iter().map(|g| g.s(3)).collect::<Vec<_>>().join(", ");

        let total_err = diagram.error.clone();
        let err = total_err.v();
        let err_str = if err < 0.001 {
            format!("{:.3e}", err)
        } else {
            format!("{:.5}", err)
        };
        println!("([{} ], {: <9}, [{} ]),  // Step {}", vals_str, err_str, grads_str, idx);
    }

    pub struct CoordGetter(pub Box<dyn Fn(Diagram) -> f64>);

    fn check(
        inputs: Vec<Input>,
        targets: Vec<(&str, f64)>,
        expecteds: Vec<ExpectedStep>,
        max_step_error_ratio: f64,
        max_steps: usize
    ) {
        let targets: HashMap<_, _> = targets.iter().map(|(k, v)| (k.to_string(), *v)).collect();
        let mut model = Model::new(inputs.clone(), targets);
        model.train(max_step_error_ratio, max_steps);

        let mut coord_getters: Vec<(usize, CoordGetter)> = inputs.iter().enumerate().flat_map(
            |(shape_idx, (shape, duals))| match shape {
                Shape::Circle(_) => {
                    let getters = [
                        |c: Circle<f64>| c.c.x,
                        |c: Circle<f64>| c.c.y,
                        |c: Circle<f64>| c.r,
                    ];
                    getters.into_iter().zip(duals).filter_map(|(getter, dual)| {
                        is_one_hot(dual).map(|grad_idx| (
                            grad_idx,
                            CoordGetter(
                                Box::new(move |step: Diagram| match step.shapes()[shape_idx] {
                                    Shape::Circle(c) => getter(c),
                                    _ => panic!("Expected Circle at idx {}", shape_idx),
                                })
                            )
                        )
                    )
                    }).collect::<Vec<_>>()
                },
                Shape::XYRR(_) => {
                    let getters = [
                        |e: XYRR<f64>| e.c.x,
                        |e: XYRR<f64>| e.c.y,
                        |e: XYRR<f64>| e.r.x,
                        |e: XYRR<f64>| e.r.y,
                    ];
                    getters.into_iter().zip(duals).filter_map(|(getter, dual)| {
                        is_one_hot(dual).map(|grad_idx| (
                            grad_idx,
                            CoordGetter(
                                Box::new(move |step: Diagram| match step.shapes()[shape_idx].clone() {
                                    Shape::XYRR(e) => getter(e),
                                    _ => panic!("Expected XYRR at idx {}", shape_idx),
                                })
                            )
                        )
                    )
                    }).collect::<Vec<_>>()
                },
        }).collect();
        coord_getters.sort_by(|(a, _), (b, _)| a.cmp(b));
        assert_eq!(model.grad_size(), coord_getters.len());
        let coord_getters: Vec<_> = coord_getters.into_iter().map(|(_, getter)| getter).collect();
        // println!("coord_getters: {:?}", coord_getters.iter().map(|(idx, _)| idx).collect::<Vec<_>>());

        let steps = model.steps;
        let generate_vals = env::var("GEN_VALS").map(|s| s.parse::<usize>().unwrap()).ok();
        match generate_vals {
            Some(_) => {
                for (idx, step) in steps.iter().enumerate() {
                    print_step(&step, idx, &coord_getters);
                }
            }
            None => {
                assert_eq!(steps.len(), expecteds.len());
                for (idx, (step, expected)) in steps.iter().zip(expecteds.iter()).enumerate() {
                    let actual = get_actual(step, &coord_getters);
                    assert_eq!(actual.vals.len(), expected.vals.len());
                    for (a_val, e_val) in actual.vals.iter().zip(expected.vals.iter()) {
                        assert_relative_eq!(a_val, e_val, epsilon = 1e-3);
                    }
                    assert_relative_eq!(actual.dual(), expected.dual(), epsilon = 1e-3);

                    // assert_relative_eq trivially false-positives when the provided "expected" value is larger than the "actual" value, because it checks |A - B| / max(A, B).
                    // TODO: factor out and use a better relative-equality macro.
                    let a_err = actual.err;
                    let e_err = expected.err;
                    let abs_err_diff = (e_err - a_err).abs();
                    let relative_err = abs_err_diff / e_err;
                    assert!(relative_err < 1e-3, "relative_err {} >= 1e-3: actual err {}, expected {}", relative_err, a_err, e_err);

                    print_step(&step, idx, &coord_getters);
                }
            }
        }
    }

    #[test]
    fn fizz_buzz_circles() {
        // 2 Circles, only the 2nd circle's x and r can move:
        // - 1st circle is fixed unit circle at origin
        // - 2nd circle's center is fixed on x-axis (y=0)
        // This is the minimal degrees of freedom that can reach any target (relative) distribution between {"0*", "*1", and "01"} (1st circle size, 2nd circle size, intersection size).
        let inputs: Vec<Input> = vec![
            (Shape::Circle(Circle { idx: 0, c: R2 { x: 0., y: 0. }, r: 1. }), vec![ vec![0., 0.], vec![0., 0.], vec![0., 0.], ]),
            (Shape::Circle(Circle { idx: 1, c: R2 { x: 1., y: 0. }, r: 1. }), vec![ vec![1., 0.], vec![0., 0.], vec![0., 1.], ]),
        ];

        let os = env::consts::OS;
        let macos = vec![
            ([ 1.000, 1.000 ], 0.38587  , [ 0.426, -1.456 ]),  // Step 0
            ([ 1.087, 0.704 ], 0.10719  , [-0.228,  1.615 ]),  // Step 1
            ([ 1.075, 0.789 ], 0.03504  , [ 0.741, -0.551 ]),  // Step 2
            ([ 1.097, 0.772 ], 0.00966  , [ 0.448,  1.048 ]),  // Step 3
            ([ 1.100, 0.779 ], 0.01118  , [ 0.716, -0.544 ]),  // Step 4
            ([ 1.107, 0.774 ], 0.00336  , [ 0.443,  1.047 ]),  // Step 5
            ([ 1.108, 0.776 ], 0.00378  , [ 0.708, -0.541 ]),  // Step 6
            ([ 1.111, 0.774 ], 0.001167 , [ 0.441,  1.046 ]),  // Step 7
            ([ 1.111, 0.775 ], 0.001298 , [ 0.705, -0.540 ]),  // Step 8
            ([ 1.112, 0.774 ], 4.052e-4 , [ 0.440,  1.046 ]),  // Step 9
            ([ 1.112, 0.775 ], 4.491e-4 , [ 0.704, -0.540 ]),  // Step 10
            ([ 1.112, 0.775 ], 1.406e-4 , [ 0.440,  1.046 ]),  // Step 11
            ([ 1.112, 0.775 ], 1.557e-4 , [ 0.704, -0.540 ]),  // Step 12
            ([ 1.113, 0.775 ], 4.880e-5 , [ 0.440,  1.046 ]),  // Step 13
            ([ 1.113, 0.775 ], 5.400e-5 , [ 0.704, -0.540 ]),  // Step 14
            ([ 1.113, 0.775 ], 1.693e-5 , [ 0.440,  1.046 ]),  // Step 15
            ([ 1.113, 0.775 ], 1.874e-5 , [ 0.704, -0.540 ]),  // Step 16
            ([ 1.113, 0.775 ], 5.877e-6 , [ 0.440,  1.046 ]),  // Step 17
            ([ 1.113, 0.775 ], 6.501e-6 , [ 0.704, -0.540 ]),  // Step 18
            ([ 1.113, 0.775 ], 2.039e-6 , [ 0.440,  1.046 ]),  // Step 19
            ([ 1.113, 0.775 ], 2.256e-6 , [ 0.704, -0.540 ]),  // Step 20
            ([ 1.113, 0.775 ], 7.076e-7 , [ 0.440,  1.046 ]),  // Step 21
            ([ 1.113, 0.775 ], 7.828e-7 , [ 0.704, -0.540 ]),  // Step 22
            ([ 1.113, 0.775 ], 2.456e-7 , [ 0.440,  1.046 ]),  // Step 23
            ([ 1.113, 0.775 ], 2.716e-7 , [ 0.704, -0.540 ]),  // Step 24
            ([ 1.113, 0.775 ], 8.521e-8 , [ 0.440,  1.046 ]),  // Step 25
            ([ 1.113, 0.775 ], 9.427e-8 , [ 0.704, -0.540 ]),  // Step 26
            ([ 1.113, 0.775 ], 2.957e-8 , [ 0.440,  1.046 ]),  // Step 27
            ([ 1.113, 0.775 ], 3.271e-8 , [ 0.704, -0.540 ]),  // Step 28
            ([ 1.113, 0.775 ], 1.026e-8 , [ 0.440,  1.046 ]),  // Step 29
            ([ 1.113, 0.775 ], 1.135e-8 , [ 0.704, -0.540 ]),  // Step 30
            ([ 1.113, 0.775 ], 3.561e-9 , [ 0.440,  1.046 ]),  // Step 31
            ([ 1.113, 0.775 ], 3.939e-9 , [ 0.704, -0.540 ]),  // Step 32
            ([ 1.113, 0.775 ], 1.236e-9 , [ 0.440,  1.046 ]),  // Step 33
            ([ 1.113, 0.775 ], 1.367e-9 , [ 0.704, -0.540 ]),  // Step 34
            ([ 1.113, 0.775 ], 4.288e-10, [ 0.440,  1.046 ]),  // Step 35
            ([ 1.113, 0.775 ], 4.743e-10, [ 0.704, -0.540 ]),  // Step 36
            ([ 1.113, 0.775 ], 1.488e-10, [ 0.440,  1.046 ]),  // Step 37
            ([ 1.113, 0.775 ], 1.646e-10, [ 0.704, -0.540 ]),  // Step 38
            ([ 1.113, 0.775 ], 5.163e-11, [ 0.440,  1.046 ]),  // Step 39
            ([ 1.113, 0.775 ], 5.712e-11, [ 0.704, -0.540 ]),  // Step 40
            ([ 1.113, 0.775 ], 1.792e-11, [ 0.440,  1.046 ]),  // Step 41
            ([ 1.113, 0.775 ], 1.982e-11, [ 0.704, -0.540 ]),  // Step 42
            ([ 1.113, 0.775 ], 6.217e-12, [ 0.440,  1.046 ]),  // Step 43
            ([ 1.113, 0.775 ], 6.878e-12, [ 0.704, -0.540 ]),  // Step 44
            ([ 1.113, 0.775 ], 2.157e-12, [ 0.440,  1.046 ]),  // Step 45
            ([ 1.113, 0.775 ], 2.387e-12, [ 0.704, -0.540 ]),  // Step 46
            ([ 1.113, 0.775 ], 7.487e-13, [ 0.440,  1.046 ]),  // Step 47
            ([ 1.113, 0.775 ], 8.283e-13, [ 0.704, -0.540 ]),  // Step 48
            ([ 1.113, 0.775 ], 2.598e-13, [ 0.440,  1.046 ]),  // Step 49
            ([ 1.113, 0.775 ], 2.872e-13, [ 0.704, -0.540 ]),  // Step 50
            ([ 1.113, 0.775 ], 9.023e-14, [ 0.440,  1.046 ]),  // Step 51
            ([ 1.113, 0.775 ], 9.948e-14, [ 0.704, -0.540 ]),  // Step 52
            ([ 1.113, 0.775 ], 3.120e-14, [ 0.440,  1.046 ]),  // Step 53
            ([ 1.113, 0.775 ], 3.486e-14, [ 0.704, -0.540 ]),  // Step 54
            ([ 1.113, 0.775 ], 1.105e-14, [ 0.440,  1.046 ]),  // Step 55
            ([ 1.113, 0.775 ], 1.199e-14, [ 0.704, -0.540 ]),  // Step 56
            ([ 1.113, 0.775 ], 3.691e-15, [ 0.440,  1.046 ]),  // Step 57
            ([ 1.113, 0.775 ], 4.219e-15, [ 0.704, -0.540 ]),  // Step 58
            ([ 1.113, 0.775 ], 1.360e-15, [ 0.440,  1.046 ]),  // Step 59
            ([ 1.113, 0.775 ], 1.499e-15, [ 0.704, -0.540 ]),  // Step 60
            ([ 1.113, 0.775 ], 6.661e-16, [ 0.440,  1.046 ]),  // Step 61
            ([ 1.113, 0.775 ], 6.939e-16, [ 0.704, -0.540 ]),  // Step 62
            ([ 1.113, 0.775 ], 5.551e-17, [ 0.440,  1.046 ]),  // Step 63
            ([ 1.113, 0.775 ], 5.551e-17, [ 0.440,  1.046 ]),  // Step 64
        ];
        let mut linux = macos.clone();
        linux[53] = ([ 1.113, 0.775 ], 3.1197e-14, [ 0.440,  1.046 ]);  // Step 53

        let expecteds = if os == "macos" { macos } else { linux };

        check(inputs, FIZZ_BUZZ.into(), expecteds.to(), 0.8, 100);
    }

    #[test]
    fn fizz_buzz_circle_ellipse() {
        let ( z, d ) = d_fns(3);
        let inputs: Vec<Input> = vec![
            ( Shape::Circle(Circle { idx: 0, c: R2 { x: 0., y: 0. }, r: 1.                  }), vec![ z( ), z( ), z( ),       ]),
            ( Shape::  XYRR(  XYRR { idx: 1, c: R2 { x: 1., y: 0. }, r: R2 { x: 1., y: 1. } }), vec![ d(0), z( ), d(1), d(2), ]),
        ];

        let os = env::consts::OS;
        let macos = vec![
            ([ 1.000, 1.000, 1.000 ], 0.38587  , [ 0.426, -0.834, -0.622 ]),  // Step 0
            ([ 1.117, 0.771, 0.829 ], 0.03439  , [-0.436, -0.431, -0.614 ]),  // Step 1
            ([ 1.103, 0.757, 0.810 ], 0.01255  , [ 0.274, -0.884, -0.696 ]),  // Step 2
            ([ 1.105, 0.750, 0.804 ], 0.00444  , [-0.446, -0.433, -0.616 ]),  // Step 3
            ([ 1.104, 0.748, 0.801 ], 0.00321  , [-0.716,  0.451,  0.082 ]),  // Step 4
            ([ 1.102, 0.749, 0.802 ], 0.001105 , [-0.448, -0.433, -0.617 ]),  // Step 5
            ([ 1.101, 0.749, 0.801 ], 9.489e-4 , [-0.718,  0.452,  0.083 ]),  // Step 6
            ([ 1.100, 0.749, 0.801 ], 3.018e-4 , [-0.719,  0.452,  0.083 ]),  // Step 7
            ([ 1.100, 0.749, 0.801 ], 2.411e-4 , [-0.449, -0.433, -0.617 ]),  // Step 8
            ([ 1.100, 0.749, 0.801 ], 7.918e-5 , [-0.719,  0.452,  0.083 ]),  // Step 9
            ([ 1.100, 0.749, 0.801 ], 6.625e-5 , [-0.449, -0.433, -0.617 ]),  // Step 10
            ([ 1.100, 0.749, 0.801 ], 2.055e-5 , [-0.719,  0.452,  0.083 ]),  // Step 11
            ([ 1.100, 0.749, 0.801 ], 1.829e-5 , [-0.449, -0.433, -0.617 ]),  // Step 12
            ([ 1.100, 0.749, 0.801 ], 5.454e-6 , [-0.449, -0.433, -0.617 ]),  // Step 13
            ([ 1.100, 0.749, 0.801 ], 4.881e-6 , [-0.719,  0.452,  0.083 ]),  // Step 14
            ([ 1.100, 0.749, 0.801 ], 1.550e-6 , [-0.719,  0.452,  0.083 ]),  // Step 15
            ([ 1.100, 0.749, 0.801 ], 1.167e-6 , [-0.449, -0.433, -0.617 ]),  // Step 16
            ([ 1.100, 0.749, 0.801 ], 4.113e-7 , [-0.719,  0.452,  0.083 ]),  // Step 17
            ([ 1.100, 0.749, 0.801 ], 3.188e-7 , [-0.449, -0.433, -0.617 ]),  // Step 18
            ([ 1.100, 0.749, 0.801 ], 1.085e-7 , [-0.719,  0.452,  0.083 ]),  // Step 19
            ([ 1.100, 0.749, 0.801 ], 8.730e-8 , [-0.449, -0.433, -0.617 ]),  // Step 20
            ([ 1.100, 0.749, 0.801 ], 2.840e-8 , [-0.719,  0.452,  0.083 ]),  // Step 21
            ([ 1.100, 0.749, 0.801 ], 2.401e-8 , [-0.449, -0.433, -0.617 ]),  // Step 22
            ([ 1.100, 0.749, 0.801 ], 7.354e-9 , [-0.719,  0.452,  0.083 ]),  // Step 23
            ([ 1.100, 0.749, 0.801 ], 6.633e-9 , [-0.449, -0.433, -0.617 ]),  // Step 24
            ([ 1.100, 0.749, 0.801 ], 1.978e-9 , [-0.449, -0.433, -0.617 ]),  // Step 25
            ([ 1.100, 0.749, 0.801 ], 1.738e-9 , [-0.719,  0.452,  0.083 ]),  // Step 26
            ([ 1.100, 0.749, 0.801 ], 5.519e-10, [-0.719,  0.452,  0.083 ]),  // Step 27
            ([ 1.100, 0.749, 0.801 ], 4.264e-10, [-0.449, -0.433, -0.617 ]),  // Step 28
            ([ 1.100, 0.749, 0.801 ], 1.457e-10, [-0.719,  0.452,  0.083 ]),  // Step 29
            ([ 1.100, 0.749, 0.801 ], 1.167e-10, [-0.449, -0.433, -0.617 ]),  // Step 30
            ([ 1.100, 0.749, 0.801 ], 3.818e-11, [-0.719,  0.452,  0.083 ]),  // Step 31
            ([ 1.100, 0.749, 0.801 ], 3.209e-11, [-0.449, -0.433, -0.617 ]),  // Step 32
            ([ 1.100, 0.749, 0.801 ], 9.892e-12, [-0.719,  0.452,  0.083 ]),  // Step 33
            ([ 1.100, 0.749, 0.801 ], 8.863e-12, [-0.449, -0.433, -0.617 ]),  // Step 34
            ([ 1.100, 0.749, 0.801 ], 2.646e-12, [-0.449, -0.433, -0.617 ]),  // Step 35
            ([ 1.100, 0.749, 0.801 ], 2.351e-12, [-0.719,  0.452,  0.083 ]),  // Step 36
            ([ 1.100, 0.749, 0.801 ], 7.414e-13, [-0.719,  0.452,  0.083 ]),  // Step 37
            ([ 1.100, 0.749, 0.801 ], 5.653e-13, [-0.449, -0.433, -0.617 ]),  // Step 38
            ([ 1.100, 0.749, 0.801 ], 1.996e-13, [-0.719,  0.452,  0.083 ]),  // Step 39
            ([ 1.100, 0.749, 0.801 ], 1.554e-13, [-0.449, -0.433, -0.617 ]),  // Step 40
            ([ 1.100, 0.749, 0.801 ], 6.070e-14, [-0.719,  0.452,  0.083 ]),  // Step 41
            ([ 1.100, 0.749, 0.801 ], 3.972e-14, [-0.449, -0.433, -0.617 ]),  // Step 42
            ([ 1.100, 0.749, 0.801 ], 1.615e-14, [-0.449, -0.433, -0.617 ]),  // Step 43
            ([ 1.100, 0.749, 0.801 ], 1.210e-14, [-0.719,  0.452,  0.083 ]),  // Step 44
            ([ 1.100, 0.749, 0.801 ], 4.025e-15, [ 0.270, -0.884, -0.700 ]),  // Step 45
            ([ 1.100, 0.749, 0.801 ], 4.163e-16, [ 0.719, -0.452, -0.083 ]),  // Step 46
            ([ 1.100, 0.749, 0.801 ], 3.608e-16, [ 0.719, -0.452, -0.083 ]),  // Step 47
            ([ 1.100, 0.749, 0.801 ], 5.551e-17, [ 0.449,  0.433,  0.617 ]),  // Step 48
            ([ 1.100, 0.749, 0.801 ], 5.551e-17, [ 0.449,  0.433,  0.617 ]),  // Step 49
        ].to();
        let mut linux: Vec<ExpectedStep> = macos.clone();
        linux[39] = ([ 1.100, 0.749, 0.801 ], 1.974e-13, [-0.719,  0.452,  0.083 ]).into();  // Step 39
        linux[40] = ([ 1.100, 0.749, 0.801 ], 1.550e-13, [-0.449, -0.433, -0.617 ]).into();  // Step 40
        let expecteds = if os == "macos" { macos } else { linux };

        check(inputs, FIZZ_BUZZ.into(), expecteds, 0.8, 100)
    }

    #[test]
    fn fizz_buzz_ellipses_diag() {
        let ( z, d ) = d_fns(7);
        let inputs: Vec<Input> = vec![
            ( Shape::XYRR(XYRR { idx: 0, c: R2 { x: 1., y: 0. }, r: R2 { x: 1., y: 1. } }), vec![ d(0), z( ), d(1), d(2), ] ),
            ( Shape::XYRR(XYRR { idx: 1, c: R2 { x: 0., y: 1. }, r: R2 { x: 1., y: 1. } }), vec![ d(3), d(4), d(5), d(6), ] ),
        ];

        let expecteds: Vec<ExpectedStep> = vec![
            ([ 1.000, 1.000, 1.000, 0.000, 1.000, 1.000, 1.000 ], 0.32865  , [-0.193,  0.646,  0.646,  0.193, -0.193, -0.454, -0.454 ]),  // Step 0
            ([ 0.962, 1.128, 1.128, 0.038, 0.962, 0.910, 0.910 ], 0.06363  , [-0.246,  0.574,  0.584,  0.246, -0.256, -0.461, -0.453 ]),  // Step 1
            ([ 0.952, 1.150, 1.151, 0.048, 0.952, 0.892, 0.893 ], 0.01938  , [-0.408,  0.149,  0.171,  0.408, -0.429,  0.221,  0.237 ]),  // Step 2
            ([ 0.946, 1.153, 1.153, 0.054, 0.945, 0.896, 0.896 ], 0.00874  , [-0.257,  0.555,  0.571,  0.257, -0.273, -0.458, -0.447 ]),  // Step 3
            ([ 0.944, 1.156, 1.157, 0.056, 0.943, 0.893, 0.894 ], 0.00654  , [-0.413,  0.145,  0.171,  0.413, -0.438,  0.223,  0.241 ]),  // Step 4
            ([ 0.942, 1.157, 1.158, 0.058, 0.941, 0.895, 0.895 ], 0.00273  , [-0.415,  0.144,  0.171,  0.415, -0.441,  0.224,  0.242 ]),  // Step 5
            ([ 0.941, 1.157, 1.158, 0.059, 0.940, 0.895, 0.896 ], 0.001588 , [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 6
            ([ 0.941, 1.156, 1.158, 0.059, 0.940, 0.896, 0.897 ], 7.559e-4 , [-0.416,  0.144,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 7
            ([ 0.941, 1.157, 1.158, 0.059, 0.939, 0.896, 0.897 ], 3.134e-4 , [-0.416,  0.144,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 8
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.818e-4 , [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 9
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 9.508e-5 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 10
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.939e-5 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 11
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.632e-5 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 12
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 6.760e-6 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 13
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.530e-6 , [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 14
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.957e-6 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 15
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 8.108e-7 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 16
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 5.824e-7 , [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 17
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 2.244e-7 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 18
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 9.298e-8 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 19
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 4.544e-8 , [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 20
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 2.982e-8 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 21
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.235e-8 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 22
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 6.014e-9 , [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 23
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.681e-9 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 24
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.603e-9 , [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 25
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.218e-9 , [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 26
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 5.047e-10, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 27
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.007e-10, [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 28
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.372e-10, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 29
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 5.684e-11, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 30
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.074e-11, [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 31
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.767e-11, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 32
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 7.318e-12, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 33
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.031e-12, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 34
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.731e-12, [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 35
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 8.425e-13, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 36
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.489e-13, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 37
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 2.105e-13, [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 38
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.044e-13, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 39
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 4.324e-14, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 40
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.776e-14, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 41
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 7.633e-15, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 42
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.220e-15, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 43
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.138e-15, [-0.416,  0.143,  0.172,  0.416, -0.443,  0.224,  0.242 ]),  // Step 44
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 4.163e-16, [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 45
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.331e-16, [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 46
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.665e-16, [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 47
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 3.053e-16, [-0.260,  0.553,  0.570,  0.260, -0.277, -0.458, -0.446 ]),  // Step 48
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.665e-16, [-0.156, -0.409, -0.398,  0.156, -0.166,  0.682,  0.688 ]),  // Step 49
            ([ 0.940, 1.157, 1.158, 0.060, 0.939, 0.896, 0.897 ], 1.665e-16, [-0.000,  0.000, -0.000, -0.000, -0.000,  0.000, -0.000 ]),  // Step 50
            // a repeated step occurs at some nondeterministic point past step 50, typically between 50 and 80. TODO: debug.
        ].to();

        check(inputs, FIZZ_BUZZ.into(), expecteds, 0.7, 50)
    }

    #[test]
    fn fizz_buzz_bazz_circle_ellipses() {
        let ( z, d ) = d_fns(7);
        let inputs: Vec<Input> = vec![
            ( Shape::Circle(Circle { idx: 0, c: R2 { x: 0., y: 0. }, r: 1. }     ), vec![ z( ), z( ), z( ),       ]),
            ( Shape::  XYRR(Circle { idx: 1, c: R2 { x: 1., y: 0. }, r: 1. }.to()), vec![ d(0), z( ), d(1), d(2), ]),
            ( Shape::  XYRR(Circle { idx: 2, c: R2 { x: 0., y: 1. }, r: 1. }.to()), vec![ d(3), d(4), d(5), d(6), ]),
        ];

        let expecteds: Vec<ExpectedStep> = vec![
            ([ 1.000, 1.000, 1.000, 0.000, 1.000, 1.000, 1.000 ], 0.66841  , [ 0.790, -0.670, -0.419, -0.290,  0.790, -0.419, -0.670 ]),  // Step 0
            ([ 1.230, 0.805, 0.878,-0.084, 1.230, 0.878, 0.805 ], 0.69619  , [-2.540,  2.122,  1.552,  2.214, -2.396,  1.231,  0.814 ]),  // Step 1
            ([ 0.988, 1.007, 1.026, 0.126, 1.002, 0.995, 0.882 ], 0.63974  , [ 0.782, -0.676, -0.477, -0.208,  0.828, -0.383, -0.726 ]),  // Step 2
            ([ 1.201, 0.823, 0.896, 0.070, 1.228, 0.891, 0.684 ], 0.32651  , [-2.244,  1.665,  1.989,  1.843, -2.717,  1.165,  0.846 ]),  // Step 3
            ([ 1.098, 0.899, 0.987, 0.155, 1.102, 0.944, 0.723 ], 0.31049  , [ 0.366, -0.565, -0.286,  0.069,  0.325, -0.224, -0.523 ]),  // Step 4
            ([ 1.179, 0.774, 0.924, 0.170, 1.174, 0.895, 0.608 ], 0.23623  , [-0.486,  0.519,  0.267,  0.031, -0.468, -0.442, -0.409 ]),  // Step 5
            ([ 1.104, 0.854, 0.965, 0.175, 1.102, 0.827, 0.545 ], 0.27055  , [ 0.089, -0.761, -0.513,  0.063, -0.429,  0.328,  0.680 ]),  // Step 6
            ([ 1.117, 0.740, 0.889, 0.184, 1.038, 0.876, 0.647 ], 0.19590  , [-0.563,  0.640,  0.397,  0.153, -0.091, -0.498, -0.731 ]),  // Step 7
            ([ 1.058, 0.808, 0.930, 0.200, 1.029, 0.824, 0.570 ], 0.17079  , [ 0.243, -0.584, -0.300,  0.139,  0.143, -0.232, -0.441 ]),  // Step 8
            ([ 1.091, 0.729, 0.890, 0.219, 1.048, 0.792, 0.510 ], 0.14420  , [-0.550, -0.409, -0.469,  0.038, -0.530,  0.260,  0.602 ]),  // Step 9
            ([ 1.044, 0.694, 0.850, 0.222, 1.003, 0.814, 0.561 ], 0.10178  , [ 0.012,  0.225,  0.325,  0.145, -0.051, -0.447, -0.700 ]),  // Step 10
            ([ 1.045, 0.711, 0.875, 0.233, 0.999, 0.780, 0.508 ], 0.10128  , [ 0.036, -0.832, -0.527,  0.050, -0.538,  0.345,  0.705 ]),  // Step 11
            ([ 1.047, 0.668, 0.847, 0.236, 0.971, 0.798, 0.544 ], 0.09261  , [-0.260,  0.985,  0.744,  0.153,  0.248, -0.230, -0.465 ]),  // Step 12
            ([ 1.035, 0.714, 0.882, 0.243, 0.983, 0.787, 0.523 ], 0.09845  , [ 0.074, -0.778, -0.463,  0.153, -0.008,  0.267,  0.341 ]),  // Step 13
            ([ 1.040, 0.661, 0.851, 0.253, 0.982, 0.806, 0.546 ], 0.09254  , [ 0.384,  0.563,  0.656,  0.153,  0.317, -0.175, -0.400 ]),  // Step 14
            ([ 1.062, 0.694, 0.889, 0.262, 1.001, 0.795, 0.522 ], 0.07983  , [ 0.073, -0.785, -0.451,  0.145, -0.001,  0.258,  0.324 ]),  // Step 15
            ([ 1.066, 0.651, 0.864, 0.270, 1.001, 0.810, 0.540 ], 0.10337  , [-0.612,  0.641,  0.378,  0.145, -0.118, -0.486, -0.769 ]),  // Step 16
            ([ 1.033, 0.685, 0.885, 0.278, 0.994, 0.783, 0.499 ], 0.08868  , [ 0.420, -0.505, -0.156,  0.041, -0.191,  0.588,  1.017 ]),  // Step 17
            ([ 1.052, 0.662, 0.878, 0.280, 0.986, 0.810, 0.545 ], 0.08186  , [-0.647,  0.659,  0.397,  0.161, -0.148, -0.486, -0.755 ]),  // Step 18
            ([ 1.025, 0.690, 0.894, 0.287, 0.979, 0.790, 0.513 ], 0.08246  , [ 0.463, -0.448, -0.105,  0.156,  0.345,  0.502,  0.654 ]),  // Step 19
            ([ 1.049, 0.667, 0.889, 0.295, 0.997, 0.816, 0.547 ], 0.07596  , [-0.649,  0.660,  0.402,  0.161, -0.159, -0.484, -0.747 ]),  // Step 20
            ([ 1.024, 0.693, 0.905, 0.301, 0.991, 0.797, 0.518 ], 0.08314  , [ 0.067, -0.799, -0.432,  0.160, -0.035,  0.263,  0.363 ]),  // Step 21
            ([ 1.028, 0.647, 0.880, 0.310, 0.989, 0.812, 0.538 ], 0.07278  , [ 0.382,  0.582,  0.645,  0.162,  0.289, -0.180, -0.383 ]),  // Step 22
            ([ 1.045, 0.675, 0.910, 0.318, 1.003, 0.803, 0.520 ], 0.06946  , [ 0.008, -0.853, -0.465,  0.043, -0.572,  0.353,  0.725 ]),  // Step 23
            ([ 1.046, 0.645, 0.894, 0.319, 0.983, 0.815, 0.546 ], 0.07939  , [-0.660,  0.676,  0.402,  0.170, -0.167, -0.484, -0.748 ]),  // Step 24
            ([ 1.019, 0.672, 0.910, 0.326, 0.976, 0.796, 0.516 ], 0.06861  , [ 0.457, -0.453, -0.101,  0.166,  0.331,  0.496,  0.673 ]),  // Step 25
            ([ 1.039, 0.652, 0.906, 0.333, 0.990, 0.817, 0.544 ], 0.06372  , [-0.017,  0.246,  0.344,  0.169, -0.106, -0.433, -0.678 ]),  // Step 26
            ([ 1.038, 0.664, 0.922, 0.341, 0.985, 0.796, 0.512 ], 0.06343  , [-0.000, -0.869, -0.453,  0.042, -0.587,  0.364,  0.735 ]),  // Step 27
            ([ 1.038, 0.637, 0.908, 0.343, 0.966, 0.808, 0.535 ], 0.05926  , [-0.291,  1.051,  0.704,  0.177,  0.199, -0.239, -0.436 ]),  // Step 28
            ([ 1.029, 0.668, 0.929, 0.348, 0.972, 0.801, 0.522 ], 0.06117  , [ 0.047, -0.814, -0.404,  0.177, -0.057,  0.266,  0.376 ]),  // Step 29
            ([ 1.031, 0.634, 0.912, 0.355, 0.970, 0.812, 0.538 ], 0.05677  , [-0.294,  1.055,  0.703,  0.179,  0.192, -0.242, -0.432 ]),  // Step 30
            ([ 1.023, 0.664, 0.932, 0.360, 0.975, 0.805, 0.526 ], 0.05498  , [ 0.045, -0.817, -0.397,  0.177, -0.066,  0.265,  0.383 ]),  // Step 31
            ([ 1.025, 0.633, 0.917, 0.367, 0.973, 0.815, 0.540 ], 0.05472  , [ 0.370,  0.620,  0.640,  0.180,  0.262, -0.195, -0.364 ]),  // Step 32
            ([ 1.038, 0.655, 0.939, 0.373, 0.982, 0.808, 0.527 ], 0.04713  , [ 0.042, -0.820, -0.389,  0.176, -0.064,  0.262,  0.376 ]),  // Step 33
            ([ 1.039, 0.629, 0.927, 0.379, 0.980, 0.816, 0.539 ], 0.05718  , [-0.682,  0.696,  0.405,  0.177, -0.198, -0.479, -0.732 ]),  // Step 34
            ([ 1.019, 0.649, 0.938, 0.384, 0.974, 0.803, 0.518 ], 0.04629  , [ 0.448, -0.462, -0.094,  0.177,  0.310,  0.485,  0.690 ]),  // Step 35
            ([ 1.032, 0.635, 0.936, 0.389, 0.983, 0.817, 0.538 ], 0.04259  , [-0.691,  0.698,  0.410,  0.177, -0.212, -0.480, -0.725 ]),  // Step 36
            ([ 1.018, 0.650, 0.944, 0.393, 0.979, 0.807, 0.523 ], 0.04459  , [ 0.045, -0.832, -0.381,  0.177, -0.079,  0.259,  0.392 ]),  // Step 37
            ([ 1.019, 0.626, 0.933, 0.398, 0.976, 0.814, 0.534 ], 0.04275  , [ 0.371,  0.630,  0.634,  0.182,  0.247, -0.199, -0.356 ]),  // Step 38
            ([ 1.029, 0.643, 0.950, 0.403, 0.983, 0.809, 0.525 ], 0.03936  , [-0.015, -0.887, -0.415,  0.031, -0.613,  0.371,  0.750 ]),  // Step 39
            ([ 1.029, 0.626, 0.942, 0.403, 0.971, 0.816, 0.539 ], 0.03950  , [-0.702,  0.711,  0.412,  0.183, -0.220, -0.482, -0.723 ]),  // Step 40
            ([ 1.015, 0.640, 0.950, 0.407, 0.967, 0.807, 0.525 ], 0.03642  , [ 0.441, -0.463, -0.091,  0.186,  0.299,  0.485,  0.702 ]),  // Step 41
            ([ 1.025, 0.629, 0.948, 0.411, 0.974, 0.818, 0.541 ], 0.03626  , [-0.034,  0.269,  0.361,  0.183, -0.149, -0.437, -0.656 ]),  // Step 42
            ([ 1.024, 0.636, 0.958, 0.416, 0.970, 0.806, 0.523 ], 0.03281  , [ 0.036, -0.841, -0.369,  0.183, -0.087,  0.258,  0.393 ]),  // Step 43
            ([ 1.025, 0.618, 0.950, 0.420, 0.968, 0.811, 0.532 ], 0.03138  , [-0.309,  1.094,  0.682,  0.187,  0.160, -0.251, -0.413 ]),  // Step 44
            ([ 1.020, 0.635, 0.961, 0.423, 0.970, 0.807, 0.525 ], 0.02995  , [ 0.036, -0.843, -0.365,  0.183, -0.092,  0.258,  0.398 ]),  // Step 45
            ([ 1.021, 0.618, 0.953, 0.427, 0.968, 0.813, 0.533 ], 0.02994  , [ 0.365,  0.648,  0.629,  0.189,  0.233, -0.207, -0.348 ]),  // Step 46
            ([ 1.028, 0.630, 0.965, 0.430, 0.973, 0.809, 0.527 ], 0.02583  , [ 0.033, -0.845, -0.361,  0.183, -0.092,  0.257,  0.394 ]),  // Step 47
            ([ 1.028, 0.616, 0.959, 0.433, 0.971, 0.813, 0.533 ], 0.02846  , [-0.707,  0.720,  0.409,  0.181, -0.232, -0.480, -0.716 ]),  // Step 48
            ([ 1.018, 0.626, 0.965, 0.436, 0.968, 0.806, 0.523 ], 0.02537  , [ 0.438, -0.469, -0.088,  0.189,  0.290,  0.477,  0.705 ]),  // Step 49
            ([ 1.025, 0.619, 0.963, 0.439, 0.973, 0.814, 0.534 ], 0.02307  , [-0.710,  0.722,  0.411,  0.181, -0.238, -0.482, -0.712 ]),  // Step 50
            ([ 1.017, 0.627, 0.968, 0.441, 0.970, 0.808, 0.526 ], 0.02204  , [ 0.034, -0.850, -0.356,  0.183, -0.100,  0.255,  0.403 ]),  // Step 51
            ([ 1.018, 0.614, 0.963, 0.444, 0.968, 0.812, 0.532 ], 0.02364  , [ 0.365,  0.656,  0.626,  0.191,  0.224, -0.210, -0.342 ]),  // Step 52
            ([ 1.023, 0.624, 0.972, 0.447, 0.972, 0.809, 0.527 ], 0.02146  , [-0.024, -0.905, -0.391,  0.020, -0.628,  0.379,  0.757 ]),  // Step 53
            ([ 1.023, 0.615, 0.968, 0.447, 0.965, 0.813, 0.535 ], 0.01926  , [ 0.359,  0.660,  0.626,  0.194,  0.222, -0.212, -0.342 ]),  // Step 54
            ([ 1.028, 0.623, 0.976, 0.449, 0.968, 0.810, 0.531 ], 0.01735  , [ 0.028, -0.850, -0.352,  0.187, -0.101,  0.256,  0.400 ]),  // Step 55
            ([ 1.028, 0.613, 0.972, 0.451, 0.967, 0.813, 0.535 ], 0.02188  , [-0.713,  0.730,  0.409,  0.184, -0.242, -0.481, -0.709 ]),  // Step 56
            ([ 1.020, 0.621, 0.976, 0.453, 0.964, 0.808, 0.528 ], 0.01714  , [ 0.431, -0.469, -0.086,  0.194,  0.281,  0.475,  0.710 ]),  // Step 57
            ([ 1.025, 0.616, 0.975, 0.455, 0.967, 0.813, 0.535 ], 0.01551  , [-0.717,  0.731,  0.412,  0.184, -0.247, -0.483, -0.706 ]),  // Step 58
            ([ 1.019, 0.622, 0.979, 0.457, 0.965, 0.809, 0.530 ], 0.01613  , [ 0.029, -0.854, -0.349,  0.187, -0.108,  0.255,  0.407 ]),  // Step 59
            ([ 1.020, 0.612, 0.975, 0.459, 0.964, 0.812, 0.534 ], 0.01550  , [ 0.359,  0.666,  0.625,  0.195,  0.216, -0.215, -0.338 ]),  // Step 60
            ([ 1.023, 0.619, 0.981, 0.461, 0.966, 0.810, 0.531 ], 0.01396  , [ 0.200, -0.689, -0.234,  0.190,  0.058, -0.301, -0.456 ]),  // Step 61
            ([ 1.025, 0.612, 0.979, 0.463, 0.967, 0.807, 0.526 ], 0.01378  , [-0.546,  0.898,  0.521,  0.017, -0.553,  0.425,  0.816 ]),  // Step 62
            ([ 1.022, 0.617, 0.982, 0.463, 0.964, 0.810, 0.531 ], 0.01300  , [ 0.199, -0.690, -0.233,  0.192,  0.057, -0.302, -0.456 ]),  // Step 63
            ([ 1.024, 0.611, 0.980, 0.465, 0.964, 0.807, 0.527 ], 0.01160  , [-0.549,  0.901,  0.521,  0.017, -0.556,  0.427,  0.818 ]),  // Step 64
            ([ 1.021, 0.615, 0.982, 0.465, 0.961, 0.809, 0.531 ], 0.01196  , [ 0.599, -0.304,  0.027,  0.202,  0.443, -0.083, -0.151 ]),  // Step 65
            ([ 1.027, 0.612, 0.983, 0.467, 0.966, 0.808, 0.530 ], 0.01122  , [-0.708, -0.460, -0.335,  0.014, -0.709,  0.339,  0.694 ]),  // Step 66
            ([ 1.023, 0.610, 0.981, 0.467, 0.962, 0.810, 0.533 ], 0.01156  , [-0.323,  1.125,  0.669,  0.195,  0.135, -0.261, -0.398 ]),  // Step 67
            ([ 1.021, 0.616, 0.984, 0.468, 0.962, 0.808, 0.531 ], 0.01161  , [ 0.198, -0.691, -0.232,  0.192,  0.054, -0.303, -0.454 ]),  // Step 68
            ([ 1.023, 0.610, 0.982, 0.469, 0.963, 0.806, 0.527 ], 0.01041  , [-0.310, -0.073, -0.075,  0.022, -0.325,  0.559,  1.001 ]),  // Step 69
            ([ 1.021, 0.610, 0.982, 0.470, 0.961, 0.809, 0.533 ], 0.01000  , [ 0.357,  0.672,  0.623,  0.198,  0.210, -0.218, -0.335 ]),  // Step 70
            ([ 1.023, 0.614, 0.986, 0.471, 0.962, 0.808, 0.531 ], 0.00931  , [ 0.197, -0.692, -0.231,  0.193,  0.054, -0.304, -0.454 ]),  // Step 71
            ([ 1.025, 0.609, 0.984, 0.472, 0.963, 0.806, 0.528 ], 0.01034  , [-0.310, -0.073, -0.075,  0.022, -0.325,  0.560,  1.000 ]),  // Step 72
            ([ 1.023, 0.609, 0.984, 0.472, 0.961, 0.809, 0.534 ], 0.00933  , [-0.324,  1.129,  0.668,  0.196,  0.132, -0.263, -0.395 ]),  // Step 73
            ([ 1.021, 0.614, 0.987, 0.473, 0.961, 0.808, 0.532 ], 0.00992  , [ 0.197, -0.692, -0.231,  0.193,  0.052, -0.305, -0.453 ]),  // Step 74
            ([ 1.023, 0.609, 0.985, 0.475, 0.962, 0.806, 0.529 ], 0.00874  , [-0.311, -0.072, -0.074,  0.021, -0.327,  0.561,  1.001 ]),  // Step 75
            ([ 1.021, 0.609, 0.985, 0.475, 0.960, 0.808, 0.534 ], 0.00854  , [ 0.596, -0.304,  0.027,  0.206,  0.440, -0.086, -0.150 ]),  // Step 76
            ([ 1.025, 0.606, 0.985, 0.476, 0.963, 0.808, 0.533 ], 0.01033  , [-0.321,  1.128,  0.664,  0.195,  0.133, -0.262, -0.395 ]),  // Step 77
            ([ 1.024, 0.612, 0.988, 0.477, 0.964, 0.806, 0.531 ], 0.00917  , [-0.031, -0.916, -0.377,  0.012, -0.635,  0.385,  0.757 ]),  // Step 78
            ([ 1.024, 0.608, 0.987, 0.477, 0.961, 0.808, 0.534 ], 0.00776  , [-0.085,  0.151,  0.072,  0.203,  0.362, -0.131, -0.211 ]),  // Step 79
            ([ 1.023, 0.610, 0.987, 0.479, 0.965, 0.807, 0.532 ], 0.00718  , [-0.539, -0.295, -0.220,  0.013, -0.547, -0.218, -0.164 ]),  // Step 80
            ([ 1.020, 0.608, 0.986, 0.479, 0.962, 0.806, 0.531 ], 0.00708  , [ 0.541, -0.362, -0.010,  0.028, -0.086,  0.048,  0.203 ]),  // Step 81
            ([ 1.024, 0.605, 0.986, 0.480, 0.961, 0.806, 0.532 ], 0.00926  , [-0.323,  1.131,  0.664,  0.196,  0.131, -0.263, -0.393 ]),  // Step 82
            ([ 1.022, 0.610, 0.989, 0.480, 0.962, 0.805, 0.531 ], 0.00818  , [ 0.369, -0.528, -0.119,  0.023, -0.251,  0.606,  1.061 ]),  // Step 83
            ([ 1.024, 0.608, 0.989, 0.481, 0.961, 0.807, 0.535 ], 0.00721  , [-0.485, -0.237, -0.183,  0.193, -0.026, -0.353, -0.513 ]),  // Step 84
            ([ 1.021, 0.607, 0.988, 0.482, 0.961, 0.805, 0.532 ], 0.00605  , [-0.086,  0.151,  0.071,  0.204,  0.359, -0.132, -0.209 ]),  // Step 85
            ([ 1.020, 0.608, 0.988, 0.483, 0.964, 0.804, 0.530 ], 0.00881  , [ 0.371, -0.529, -0.119,  0.022, -0.250,  0.605,  1.062 ]),  // Step 86
            ([ 1.022, 0.606, 0.988, 0.483, 0.962, 0.807, 0.535 ], 0.00743  , [-0.324,  1.132,  0.664,  0.197,  0.127, -0.265, -0.391 ]),  // Step 87
            ([ 1.021, 0.610, 0.990, 0.484, 0.963, 0.806, 0.534 ], 0.00732  , [ 0.756, -0.480, -0.268, -0.153,  0.263, -0.070, -0.023 ]),  // Step 88
            ([ 1.025, 0.607, 0.989, 0.483, 0.964, 0.805, 0.533 ], 0.00729  , [-0.539, -0.295, -0.220,  0.013, -0.546, -0.218, -0.164 ]),  // Step 89
            ([ 1.022, 0.606, 0.987, 0.483, 0.961, 0.804, 0.532 ], 0.00651  , [-0.382,  1.078,  0.629,  0.017, -0.394, -0.130, -0.041 ]),  // Step 90
            ([ 1.020, 0.609, 0.989, 0.483, 0.960, 0.804, 0.532 ], 0.00776  , [ 0.815, -0.424, -0.231,  0.026,  0.784, -0.208, -0.371 ]),  // Step 91
            ([ 1.024, 0.607, 0.988, 0.484, 0.963, 0.803, 0.531 ], 0.00902  , [-0.311, -0.072, -0.074,  0.020, -0.326,  0.562,  0.998 ]),  // Step 92
            ([ 1.022, 0.607, 0.988, 0.484, 0.961, 0.806, 0.536 ], 0.00663  , [ 0.131,  0.032, -0.185,  0.024,  0.707, -0.251, -0.432 ]),  // Step 93
            ([ 1.023, 0.607, 0.987, 0.484, 0.965, 0.804, 0.534 ], 0.00701  , [-0.380,  1.074,  0.628,  0.017, -0.393, -0.131, -0.042 ]),  // Step 94
            ([ 1.021, 0.611, 0.989, 0.484, 0.964, 0.804, 0.534 ], 0.00754  , [ 0.140, -0.749, -0.265,  0.015, -0.471, -0.174, -0.100 ]),  // Step 95
            ([ 1.022, 0.607, 0.988, 0.484, 0.961, 0.803, 0.533 ], 0.00591  , [-0.143,  0.095,  0.035,  0.025, -0.164,  0.003,  0.141 ]),  // Step 96
            ([ 1.020, 0.608, 0.988, 0.484, 0.959, 0.803, 0.535 ], 0.00910  , [ 0.814, -0.424, -0.231,  0.027,  0.784, -0.209, -0.370 ]),  // Step 97
            ([ 1.024, 0.606, 0.987, 0.484, 0.962, 0.802, 0.533 ], 0.00739  , [-0.552,  0.909,  0.519,  0.012, -0.557,  0.432,  0.815 ]),  // Step 98
            ([ 1.022, 0.609, 0.989, 0.484, 0.961, 0.803, 0.536 ], 0.00661  , [ 0.131,  0.032, -0.185,  0.023,  0.705, -0.253, -0.431 ]),  // Step 99
            ([ 1.023, 0.609, 0.988, 0.485, 0.964, 0.802, 0.534 ], 0.00689  , [-0.712, -0.461, -0.330,  0.007, -0.710,  0.342,  0.694 ]),  // Step 100
        ].to();

        check(inputs, FIZZ_BUZZ_BAZZ.into(), expecteds, 0.7, 100)
    }

    #[test]
    fn fizz_buzz_bazz_circles() {
        let ( z, d ) = d_fns(5);
        let inputs: Vec<Input> = vec![
            ( Shape::Circle(Circle { idx: 0, c: R2 { x: 0., y: 0. }, r: 1. }), vec![ z( ), z( ), z( ), ] ),
            ( Shape::Circle(Circle { idx: 1, c: R2 { x: 1., y: 0. }, r: 1. }), vec![ d(0), z( ), d(1), ] ),
            ( Shape::Circle(Circle { idx: 2, c: R2 { x: 0., y: 1. }, r: 1. }), vec![ d(2), d(3), d(4), ] ),
        ];

        let expecteds: Vec<ExpectedStep> = vec![
            ([ 1.000, 1.000, 0.000, 1.000, 1.000 ], 0.66841  , [ 0.790, -1.090, -0.290,  0.790, -1.090 ]),  // Step 0
            ([ 1.192, 0.735,-0.070, 1.192, 0.735 ], 1.07256  , [-2.559,  3.674,  2.204, -2.436,  2.027 ]),  // Step 1
            ([ 0.867, 1.202, 0.209, 0.883, 0.993 ], 1.12399  , [ 0.849, -0.786, -0.228,  0.857, -0.947 ]),  // Step 2
            ([ 1.251, 0.846, 0.106, 1.270, 0.564 ], 1.22830  , [-2.356,  2.030,  1.990, -2.448,  3.585 ]),  // Step 3
            ([ 0.896, 1.152, 0.407, 0.901, 1.105 ], 1.18063  , [ 0.783, -0.870, -0.118,  0.939, -0.879 ]),  // Step 4
            ([ 1.267, 0.740, 0.351, 1.346, 0.688 ], 0.93121  , [-2.132,  3.353,  1.599, -2.823,  3.242 ]),  // Step 5
            ([ 1.038, 1.100, 0.522, 1.043, 1.036 ], 0.83157  , [ 0.746, -1.091, -0.014,  0.881, -1.056 ]),  // Step 6
            ([ 1.265, 0.767, 0.518, 1.312, 0.714 ], 0.41607  , [-1.824,  3.657,  1.387, -2.855,  2.038 ]),  // Step 7
            ([ 1.170, 0.959, 0.591, 1.162, 0.821 ], 0.30804  , [ 0.491, -1.247, -0.167,  0.191, -0.671 ]),  // Step 8
            ([ 1.240, 0.782, 0.567, 1.189, 0.725 ], 0.27646  , [-0.467,  0.861, -0.043, -0.461, -0.769 ]),  // Step 9
            ([ 1.172, 0.907, 0.561, 1.122, 0.613 ], 0.30465  , [ 0.085, -1.225, -0.004, -0.385,  0.979 ]),  // Step 10
            ([ 1.183, 0.746, 0.560, 1.072, 0.743 ], 0.23140  , [-0.539,  0.956, -0.045, -0.585, -0.725 ]),  // Step 11
            ([ 1.122, 0.853, 0.555, 1.006, 0.661 ], 0.14590  , [ 0.139, -1.392, -0.036, -0.321,  0.949 ]),  // Step 12
            ([ 1.130, 0.771, 0.553, 0.987, 0.717 ], 0.12730  , [-0.440,  0.955,  0.158, -0.026, -1.325 ]),  // Step 13
            ([ 1.107, 0.821, 0.561, 0.985, 0.648 ], 0.10840  , [ 0.133, -1.411, -0.047, -0.333,  0.947 ]),  // Step 14
            ([ 1.113, 0.759, 0.559, 0.971, 0.689 ], 0.09178  , [-0.457,  0.952,  0.153, -0.033, -1.328 ]),  // Step 15
            ([ 1.096, 0.795, 0.565, 0.970, 0.639 ], 0.07650  , [ 0.126, -1.424, -0.057, -0.343,  0.945 ]),  // Step 16
            ([ 1.100, 0.751, 0.563, 0.959, 0.668 ], 0.06380  , [-0.471,  0.950,  0.149, -0.038, -1.329 ]),  // Step 17
            ([ 1.087, 0.776, 0.567, 0.958, 0.633 ], 0.05241  , [ 0.122, -1.432, -0.064, -0.351,  0.944 ]),  // Step 18
            ([ 1.090, 0.746, 0.566, 0.951, 0.653 ], 0.04996  , [-0.141,  1.581,  0.209,  0.266, -0.790 ]),  // Step 19
            ([ 1.087, 0.777, 0.570, 0.956, 0.638 ], 0.04869  , [ 0.121, -1.431, -0.064, -0.354,  0.949 ]),  // Step 20
            ([ 1.090, 0.749, 0.569, 0.949, 0.656 ], 0.04763  , [-0.142,  1.583,  0.210,  0.265, -0.792 ]),  // Step 21
            ([ 1.087, 0.778, 0.573, 0.954, 0.642 ], 0.04668  , [ 0.120, -1.429, -0.064, -0.356,  0.953 ]),  // Step 22
            ([ 1.089, 0.752, 0.571, 0.947, 0.659 ], 0.04571  , [-0.142,  1.584,  0.212,  0.265, -0.793 ]),  // Step 23
            ([ 1.087, 0.780, 0.575, 0.952, 0.645 ], 0.04478  , [ 0.120, -1.428, -0.064, -0.358,  0.958 ]),  // Step 24
            ([ 1.089, 0.754, 0.574, 0.946, 0.662 ], 0.04567  , [-0.482,  0.961,  0.154, -0.045, -1.330 ]),  // Step 25
            ([ 1.080, 0.772, 0.577, 0.945, 0.637 ], 0.04538  , [ 0.262,  0.727, -0.045, -0.237,  1.163 ]),  // Step 26
            ([ 1.086, 0.789, 0.576, 0.939, 0.664 ], 0.04476  , [ 0.320, -1.056,  0.206,  0.198, -0.885 ]),  // Step 27
            ([ 1.093, 0.766, 0.580, 0.944, 0.644 ], 0.03945  , [-0.090,  0.079, -0.103, -0.543,  0.652 ]),  // Step 28
            ([ 1.090, 0.768, 0.577, 0.926, 0.665 ], 0.04194  , [ 0.109,  0.452,  0.176,  0.014, -1.219 ]),  // Step 29
            ([ 1.092, 0.778, 0.581, 0.927, 0.638 ], 0.04006  , [ 0.119, -1.438, -0.065, -0.359,  0.967 ]),  // Step 30
            ([ 1.094, 0.755, 0.580, 0.921, 0.653 ], 0.04084  , [-0.145,  1.599,  0.222,  0.262, -0.799 ]),  // Step 31
            ([ 1.092, 0.781, 0.583, 0.925, 0.641 ], 0.04035  , [ 0.119, -1.437, -0.065, -0.360,  0.971 ]),  // Step 32
            ([ 1.094, 0.758, 0.582, 0.919, 0.656 ], 0.03960  , [ 0.450,  1.080,  0.235,  0.323, -0.697 ]),  // Step 33
            ([ 1.102, 0.779, 0.587, 0.926, 0.643 ], 0.03526  , [ 0.115, -1.430, -0.065, -0.362,  0.968 ]),  // Step 34
            ([ 1.104, 0.759, 0.586, 0.921, 0.656 ], 0.03796  , [-0.145,  1.594,  0.223,  0.258, -0.796 ]),  // Step 35
            ([ 1.102, 0.782, 0.589, 0.924, 0.644 ], 0.03794  , [ 0.116, -1.430, -0.064, -0.361,  0.971 ]),  // Step 36
            ([ 1.104, 0.761, 0.588, 0.919, 0.659 ], 0.03906  , [-0.485,  0.962,  0.165, -0.051, -1.315 ]),  // Step 37
            ([ 1.096, 0.776, 0.591, 0.918, 0.638 ], 0.03589  , [ 0.466, -0.785, -0.011, -0.060,  1.470 ]),  // Step 38
            ([ 1.103, 0.765, 0.591, 0.917, 0.659 ], 0.03459  , [-0.488,  0.965,  0.167, -0.053, -1.313 ]),  // Step 39
            ([ 1.096, 0.778, 0.593, 0.917, 0.641 ], 0.03430  , [ 0.117, -1.436, -0.066, -0.363,  0.974 ]),  // Step 40
            ([ 1.097, 0.759, 0.592, 0.912, 0.654 ], 0.03596  , [-0.146,  1.602,  0.227,  0.257, -0.800 ]),  // Step 41
            ([ 1.095, 0.781, 0.595, 0.915, 0.643 ], 0.03591  , [ 0.168, -1.342,  0.189,  0.059,  0.485 ]),  // Step 42
            ([ 1.098, 0.758, 0.599, 0.916, 0.651 ], 0.03615  , [-0.292,  1.329,  0.200,  0.122,  0.594 ]),  // Step 43
            ([ 1.093, 0.780, 0.602, 0.918, 0.661 ], 0.03019  , [ 0.524, -1.415,  0.041,  0.553, -1.282 ]),  // Step 44
            ([ 1.099, 0.766, 0.602, 0.924, 0.648 ], 0.02908  , [ 0.252,  0.722, -0.047, -0.245,  1.180 ]),  // Step 45
            ([ 1.102, 0.776, 0.602, 0.920, 0.665 ], 0.03237  , [ 0.105,  0.458,  0.183,  0.004, -1.203 ]),  // Step 46
            ([ 1.104, 0.784, 0.605, 0.921, 0.644 ], 0.04015  , [ 0.117, -1.425, -0.064, -0.360,  0.973 ]),  // Step 47
            ([ 1.106, 0.761, 0.604, 0.915, 0.659 ], 0.03747  , [-0.484,  0.966,  0.169, -0.056, -1.310 ]),  // Step 48
            ([ 1.099, 0.776, 0.607, 0.914, 0.639 ], 0.03252  , [ 0.464, -0.784, -0.011, -0.061,  1.471 ]),  // Step 49
            ([ 1.105, 0.766, 0.606, 0.913, 0.659 ], 0.03090  , [-0.488,  0.968,  0.171, -0.059, -1.307 ]),  // Step 50
            ([ 1.098, 0.778, 0.609, 0.912, 0.642 ], 0.03155  , [ 0.116, -1.430, -0.067, -0.364,  0.976 ]),  // Step 51
            ([ 1.100, 0.760, 0.608, 0.908, 0.654 ], 0.03218  , [-0.147,  1.602,  0.231,  0.251, -0.796 ]),  // Step 52
            ([ 1.098, 0.780, 0.611, 0.911, 0.644 ], 0.03171  , [ 0.117, -1.430, -0.067, -0.365,  0.979 ]),  // Step 53
            ([ 1.100, 0.762, 0.610, 0.906, 0.657 ], 0.03095  , [-0.147,  1.603,  0.232,  0.251, -0.798 ]),  // Step 54
            ([ 1.098, 0.781, 0.612, 0.909, 0.647 ], 0.03043  , [ 0.166, -1.337,  0.194,  0.053,  0.491 ]),  // Step 55
            ([ 1.100, 0.761, 0.615, 0.910, 0.654 ], 0.02814  , [-0.148,  1.600,  0.231,  0.247, -0.793 ]),  // Step 56
            ([ 1.099, 0.779, 0.618, 0.913, 0.646 ], 0.02959  , [ 0.116, -1.425, -0.068, -0.365,  0.978 ]),  // Step 57
            ([ 1.100, 0.762, 0.617, 0.909, 0.657 ], 0.02938  , [-0.148,  1.601,  0.233,  0.248, -0.795 ]),  // Step 58
            ([ 1.098, 0.780, 0.620, 0.911, 0.648 ], 0.02874  , [ 0.116, -1.424, -0.068, -0.367,  0.981 ]),  // Step 59
            ([ 1.100, 0.764, 0.619, 0.907, 0.660 ], 0.02883  , [-0.488,  0.976,  0.174, -0.063, -1.309 ]),  // Step 60
            ([ 1.094, 0.775, 0.621, 0.906, 0.644 ], 0.02683  , [ 0.464, -0.788, -0.012, -0.063,  1.481 ]),  // Step 61
            ([ 1.099, 0.767, 0.621, 0.906, 0.660 ], 0.02921  , [ 0.316,  0.094,  0.012,  0.366, -1.596 ]),  // Step 62
            ([ 1.103, 0.768, 0.621, 0.910, 0.641 ], 0.03273  , [ 0.254,  0.733, -0.047, -0.242,  1.177 ]),  // Step 63
            ([ 1.107, 0.780, 0.620, 0.906, 0.659 ], 0.02593  , [ 0.522, -1.414,  0.045,  0.549, -1.283 ]),  // Step 64
            ([ 1.111, 0.767, 0.621, 0.911, 0.648 ], 0.02966  , [-0.685,  0.604, -0.118, -0.610,  0.578 ]),  // Step 65
            ([ 1.100, 0.777, 0.619, 0.901, 0.658 ], 0.02683  , [ 0.525, -1.422,  0.046,  0.553, -1.291 ]),  // Step 66
            ([ 1.105, 0.764, 0.619, 0.906, 0.646 ], 0.02949  , [-0.295,  1.336,  0.205,  0.113,  0.592 ]),  // Step 67
            ([ 1.101, 0.783, 0.622, 0.908, 0.654 ], 0.03116  , [ 0.376, -1.693,  0.022,  0.418,  0.101 ]),  // Step 68
            ([ 1.105, 0.762, 0.622, 0.913, 0.655 ], 0.02766  , [-0.487,  0.968,  0.171, -0.064, -1.302 ]),  // Step 69
            ([ 1.100, 0.773, 0.624, 0.912, 0.640 ], 0.03047  , [ 0.254,  0.735, -0.047, -0.243,  1.173 ]),  // Step 70
            ([ 1.104, 0.784, 0.623, 0.908, 0.658 ], 0.03154  , [ 0.376, -1.690,  0.022,  0.419,  0.103 ]),  // Step 71
            ([ 1.108, 0.763, 0.624, 0.914, 0.659 ], 0.03303  , [-0.484,  0.969,  0.172, -0.063, -1.302 ]),  // Step 72
            ([ 1.102, 0.776, 0.626, 0.913, 0.642 ], 0.03050  , [ 0.116, -1.422, -0.069, -0.363,  0.973 ]),  // Step 73
            ([ 1.103, 0.759, 0.625, 0.908, 0.653 ], 0.03021  , [-0.293,  1.330,  0.207,  0.113,  0.600 ]),  // Step 74
            ([ 1.099, 0.778, 0.628, 0.910, 0.662 ], 0.02924  , [ 0.315,  0.097,  0.015,  0.367, -1.591 ]),  // Step 75
            ([ 1.103, 0.779, 0.628, 0.914, 0.642 ], 0.03430  , [ 0.117, -1.420, -0.068, -0.362,  0.973 ]),  // Step 76
            ([ 1.104, 0.759, 0.627, 0.909, 0.655 ], 0.02982  , [-0.147,  1.596,  0.234,  0.244, -0.789 ]),  // Step 77
            ([ 1.103, 0.778, 0.630, 0.912, 0.646 ], 0.02816  , [ 0.115, -1.418, -0.068, -0.365,  0.976 ]),  // Step 78
            ([ 1.104, 0.762, 0.629, 0.908, 0.657 ], 0.02813  , [-0.487,  0.973,  0.173, -0.066, -1.303 ]),  // Step 79
            ([ 1.098, 0.773, 0.631, 0.907, 0.642 ], 0.02772  , [ 0.255,  0.736, -0.047, -0.244,  1.177 ]),  // Step 80
            ([ 1.102, 0.783, 0.631, 0.904, 0.658 ], 0.03271  , [ 0.525, -1.421,  0.049,  0.553, -1.283 ]),  // Step 81
            ([ 1.108, 0.767, 0.631, 0.910, 0.644 ], 0.03036  , [-0.344,  1.248, -0.060, -0.304,  1.078 ]),  // Step 82
            ([ 1.103, 0.783, 0.630, 0.907, 0.657 ], 0.03052  , [ 0.375, -1.691,  0.025,  0.419,  0.102 ]),  // Step 83
            ([ 1.108, 0.763, 0.631, 0.912, 0.659 ], 0.03099  , [-0.485,  0.971,  0.173, -0.066, -1.300 ]),  // Step 84
            ([ 1.102, 0.775, 0.633, 0.911, 0.642 ], 0.02845  , [-0.092,  0.098, -0.104, -0.545,  0.675 ]),  // Step 85
            ([ 1.100, 0.777, 0.631, 0.898, 0.657 ], 0.02725  , [ 0.524, -1.424,  0.050,  0.554, -1.292 ]),  // Step 86
            ([ 1.105, 0.764, 0.631, 0.904, 0.645 ], 0.02988  , [-0.344,  1.249, -0.061, -0.306,  1.086 ]),  // Step 87
            ([ 1.100, 0.779, 0.630, 0.900, 0.659 ], 0.03078  , [ 0.525, -1.423,  0.050,  0.555, -1.291 ]),  // Step 88
            ([ 1.106, 0.764, 0.631, 0.906, 0.645 ], 0.03073  , [-0.343,  1.248, -0.061, -0.305,  1.084 ]),  // Step 89
            ([ 1.102, 0.780, 0.630, 0.902, 0.659 ], 0.03042  , [ 0.524, -1.421,  0.050,  0.553, -1.288 ]),  // Step 90
            ([ 1.107, 0.765, 0.631, 0.907, 0.645 ], 0.03013  , [-0.343,  1.247, -0.060, -0.305,  1.083 ]),  // Step 91
            ([ 1.103, 0.781, 0.630, 0.904, 0.659 ], 0.02972  , [ 0.523, -1.419,  0.049,  0.552, -1.285 ]),  // Step 92
            ([ 1.108, 0.766, 0.630, 0.909, 0.646 ], 0.02942  , [-0.344,  1.246, -0.060, -0.305,  1.081 ]),  // Step 93
            ([ 1.104, 0.781, 0.630, 0.906, 0.659 ], 0.02902  , [ 0.522, -1.418,  0.049,  0.551, -1.283 ]),  // Step 94
            ([ 1.109, 0.767, 0.630, 0.911, 0.646 ], 0.03003  , [-0.685,  0.611, -0.119, -0.609,  0.576 ]),  // Step 95
            ([ 1.098, 0.778, 0.628, 0.901, 0.656 ], 0.02661  , [ 0.376, -1.697,  0.025,  0.421,  0.098 ]),  // Step 96
            ([ 1.101, 0.760, 0.628, 0.905, 0.657 ], 0.03034  , [-0.147,  1.600,  0.236,  0.245, -0.792 ]),  // Step 97
            ([ 1.100, 0.779, 0.631, 0.908, 0.648 ], 0.02899  , [ 0.322, -1.781, -0.240,  0.001,  0.588 ]),  // Step 98
            ([ 1.103, 0.760, 0.629, 0.908, 0.654 ], 0.02815  , [-0.293,  1.330,  0.207,  0.111,  0.601 ]),  // Step 99
            ([ 1.099, 0.777, 0.631, 0.909, 0.662 ], 0.02903  , [ 0.314,  0.097,  0.016,  0.367, -1.591 ]),  // Step 100
        ].to();

        check(inputs, FIZZ_BUZZ_BAZZ.into(), expecteds, 0.7, 100)
    }

    use crate::intersections::tests::ellipses4;

    #[test]
    fn variant_callers() {
        let ellipses = ellipses4(2.);
        let [ e0, e1, e2, e3 ] = ellipses;
        let ( z, d ) = d_fns(12);
        let inputs: Vec<Input> = vec![
            ( e0, vec![ z( ), z( ), z(  ), z(  ), ] ),
            ( e1, vec![ d(0), d(1), d( 2), d( 3), ] ),
            ( e2, vec![ d(4), d(5), d( 6), d( 7), ] ),
            ( e3, vec![ d(8), d(9), d(10), d(11), ] ),
        ];
        let expected: Vec<ExpectedStep> = vec![

        ];
        check(inputs, VARIANT_CALLERS.into(), expected, 0.001, 1)
        // test(inputs, VARIANT_CALLERS.into(), expected, 0.001, 1)
    }
}
